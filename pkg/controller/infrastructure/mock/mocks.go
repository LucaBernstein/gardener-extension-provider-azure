// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener-extension-provider-azure/pkg/controller/infrastructure (interfaces: Reconciler)
//
// Generated by this command:
//
//	mockgen -package infrastructure -destination=mocks.go github.com/gardener/gardener-extension-provider-azure/pkg/controller/infrastructure Reconciler
//

// Package infrastructure is a generated GoMock package.
package infrastructure

import (
	context "context"
	reflect "reflect"

	controller "github.com/gardener/gardener/extensions/pkg/controller"
	v1alpha1 "github.com/gardener/gardener/pkg/apis/extensions/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockReconciler is a mock of Reconciler interface.
type MockReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockReconcilerMockRecorder
	isgomock struct{}
}

// MockReconcilerMockRecorder is the mock recorder for MockReconciler.
type MockReconcilerMockRecorder struct {
	mock *MockReconciler
}

// NewMockReconciler creates a new mock instance.
func NewMockReconciler(ctrl *gomock.Controller) *MockReconciler {
	mock := &MockReconciler{ctrl: ctrl}
	mock.recorder = &MockReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReconciler) EXPECT() *MockReconcilerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockReconciler) Delete(ctx context.Context, infra *v1alpha1.Infrastructure, cluster *controller.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, infra, cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockReconcilerMockRecorder) Delete(ctx, infra, cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReconciler)(nil).Delete), ctx, infra, cluster)
}

// Reconcile mocks base method.
func (m *MockReconciler) Reconcile(ctx context.Context, infra *v1alpha1.Infrastructure, cluster *controller.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", ctx, infra, cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockReconcilerMockRecorder) Reconcile(ctx, infra, cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockReconciler)(nil).Reconcile), ctx, infra, cluster)
}

// Restore mocks base method.
func (m *MockReconciler) Restore(ctx context.Context, infra *v1alpha1.Infrastructure, cluster *controller.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", ctx, infra, cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockReconcilerMockRecorder) Restore(ctx, infra, cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockReconciler)(nil).Restore), ctx, infra, cluster)
}
